1.上电后，程序必须从bootloader区域启动
2.bootloader需要支持外部USART，USB，SD卡，EMMC，备份数据存入DDR读取文件升级
3.获取到的文件根据flash的块大小进行拆分；写入FLASH，然后再读出校验
4.文件可选择写入内部flash或者外部QSPIflash

注意事项
1.跳转需要设置主堆栈MSP指针和VTOR栈顶指针，MSP是栈顶指针的读出值，跳转地址是栈顶+4的读出值
2.bootloader写入到0x08000000
3.升级需要的数据总线需要：每次读取一个或者多个块大小的数据量，然后校验写入
4.bootloader写入flash之前，
	关总中断
	初始化QSPI，先不映射，后续需要跳转的时候再映射
	初始化升级通信的外设，挂载文件系统，轮询升级媒介，优先级：SD>USB>USART>EMMC，如有升级事件
		备份APP区域的原flash到DDR（需要校验，校验失败回复错误码或者记录错误log，然后直接跳过升级过程）
		存储媒介升级条件：当前固件和已有固件信息不一致，或者bin存在，但log不存在（已有固件会在升级之后写入log）
		通信媒介升级条件：一定时间内有升级开始升级的数据包
	写入flash中：
		解锁flash
		循环：{以flash块区域为单位，读取升级包
		如果剩余长度不足一个块，剩余部分填充0xff
		按顺序：擦除flash，写入flash，取出flash，校验flash
		上面的校验指的是获取到的块数据包，与写入之后flash再取出的数据包校验作对比
		如校验失败，读取失败，写入失败等异常情况下，记录错误状态，break当前升级流程，
		}
	写入flash之后：
		如果是存储媒介升级：
			升级失败，恢复之前固件（恢复时读取失败，写入失败，校验失败），记录log
			更新升级log，包括固件大小，固件文件名，固件总校验值
			关闭文件
			开中断
			跳转APP
		如果是通信媒介升级：
			升级失败，恢复之前固件（恢复时读取失败，写入失败，校验失败），给出回复消息
			升级成功，给出回复消息
			开中断
			跳转APP
		其他说明：跳到QSPI时，不要复位QSPI


*************************特别说明：
					1.调试阶段不要真的写入flash，写入DDR内存就行，也不要跳转
					2.写入flash需要自定义一个写入函数
					3.读取数据包也需要一个自定义函数来抽象不同的媒介
					4.做校验，最简单的校验和或者异或校验就行
					5.跳转APP函数需要复位所有外设
					6.写入固件到QSPI，从写入时开始需要额外启用映射
					7.跳转到QSPI，如写入失败（读包，写包，校验），关闭映射
					7.数据结构至少有
						固件写入的目标地址（内部或者外部）
						固件来源通道（emnu）
						固件的大小
						固件已写入目标地址的总大小
						固件的读，写，校验完成标志位
						flash的区块大小
						
						备份区域的地址
						备份区域的大小
						
						
						
						
						











		